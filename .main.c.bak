#include <ncurses.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <select.h>

#include <errno.h>
#include <fcntl.h>
#include <termios.h>

#include "header.h"
#include "serial_header.h"

#define WIDTH COLS/2
#define HEIGHT LINES

/*
TODOs:
1. make a write function
2. make a read function and integrate it into the loop
*/

WINDOW *console1_box;
WINDOW *console2_box;

WINDOW *console1;
WINDOW *console2;

int main() {
	signal(SIGINT, &exit_properly); //make sigint take curses into account

	//Configure serial communication:
	int incoming_byte;
	int serial_port = open("/dev/ttyACM0", O_RDWR);
	struct timeval timeout;
	timeout.tv_sec = 1;
	timeout.tv_usec = 0;

	if(serial_port < 0) {
		fprintf(stderr, "error: %d, %s\n", errno, strerror(errno));
		exit(errno);
	}
	struct termios tty;
	if(tcgetattr(serial_port, &tty) != 0) {
		fprintf(stderr, "error: %d, %s\n", errno, strerror(errno));
	}

	configSerial(&tty, &serial_port);
	
	//Here begins the curses section of the configuration
	init_curses();
	if (has_colors() == FALSE) {
		endwin();
		printf("Your terminal does not support color\n");
		exit(1);
	}

	int startx = 0;
	int starty = 0;
	char *user_input = (char *) calloc(1024, sizeof(char));
	int char_count = 0;

	//Configure windows
	

	console1_box = create_window_box(HEIGHT, WIDTH, starty, startx);	
	
	startx = COLS/2;

	console2_box = create_window_box(HEIGHT, WIDTH, starty, startx);
	
	startx = 1;
	starty = 1;

	console1 = create_window_nobox(HEIGHT - 2, WIDTH - 2, starty, startx);
	scrollok(console1, TRUE);
	idlok(console1, TRUE);
	wsetscrreg(console1, 1, HEIGHT - 2);
	nodelay(console1, TRUE);

	startx += COLS/2;

	console2 = create_window_nobox(HEIGHT - 2, WIDTH - 2, starty, startx);
	scrollok(console2, TRUE);
	idlok(console2, TRUE);
	wsetscrreg(console2, 1, HEIGHT - 2);

	//Deal with color:
	start_color();
	
	init_pair(1, COLOR_YELLOW, COLOR_BLACK); //left terminal user text
	init_pair(2, COLOR_RED, COLOR_BLACK); //left terminal response text
	init_pair(3, COLOR_GREEN, COLOR_BLACK); //right terminal readback text

	wattron(console1, COLOR_PAIR(1));
	wattron(console2, COLOR_PAIR(3));


	wmove(console1, LINES - 2, 1);
	while(1) {
		read(serial_port, &incoming_byte, 1);
		waddch(console2, incoming_byte);
		wrefresh(console2);

		user_input[char_count] = wgetch(console1);
		if(user_input[char_count] == ERR) {
			continue;
		}
		waddch(console1, user_input[char_count]);
		if(user_input[char_count] == '\n') {
			//process given line
			wattron(console1, COLOR_PAIR(2));
			wattr_on(console1, A_BOLD, NULL);
			user_input[char_count] = 0;
			interpret(user_input, console1, serial_port, console2);
			wattr_on(console1, A_BOLD, NULL);
			wattron(console1, COLOR_PAIR(1));

			char_count = 0;
			continue;
		}
		char_count++;
	}

	endwin();
	return 0;
}
void exit_properly() {
	delwin(console1);
	delwin(console2);
	delwin(console1_box);
	delwin(console2_box);
	endwin();
	exit(0);
}
